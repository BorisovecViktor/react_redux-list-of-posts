{"version":3,"sources":["helpers/api.ts","components/User.tsx","components/Comment.tsx","store/index.ts","components/PostCard.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","getAppData","a","postsFromServer","usersFromServer","commentsFromServer","map","post","postUser","find","user","userId","id","postComment","filter","comment","postId","User","name","email","address","className","city","street","zipcode","Comment","body","getPosts","state","posts","isLoading","loading","hasError","errorMessage","getQuery","query","getVisiblePosts","title","toLocaleLowerCase","replace","includes","filterQuery","initialState","store","createStore","action","type","postTitle","composeWithDevTools","PostCard","dispatch","useDispatch","key","onClick","PostList","useSelector","App","setFilterQueryWithDebounce","useCallback","debounce","value","length","initPosts","catch","e","handleError","message","htmlFor","onChange","target","setQuery","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f41bfdc4.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = (url: string) => (\n  fetch(`${API_URL}${url}.json`)\n  .then(response => response.json())\n)\n\nconst getPosts = () => getAll('/posts');\nconst getUsers = () => getAll('/users');\nconst getComments = () => getAll('/comments');\n\nexport const getAppData = async () => {\n  const postsFromServer = await getPosts();\n  const usersFromServer = await getUsers();\n  const commentsFromServer = await getComments();\n\n  return postsFromServer.map((post: PostFromServer) => ({\n    ...post,\n    postUser: usersFromServer.find((user: UserFromServer) => post.userId === user.id),\n    postComment: commentsFromServer.filter((comment: CommentFromServer) => post.id === comment.postId)\n  }))\n}\n","import React from 'react';\nimport './User.scss';\n\ntype Props = {\n  postUser: UserFromServer;\n};\n\nexport const User: React.FC<Props> = ({ postUser }) => {\n  const { name, email, address } = postUser;\n\n  return (\n    <>\n      <li className=\"user__item\">\n        <span className=\"user__name\">{name}</span>\n      </li>\n      <li className=\"user__item\">\n        <span className=\"user__email\">{email}</span>\n      </li>\n      <li className=\"user__item\">\n        <span className=\"user__city\">\n          {address.city}\n          ,\n        </span>\n        <span className=\"user__street\">\n          {address.street}\n          ,\n        </span>\n        <span className=\"user__zipcode\">{address.zipcode}</span>\n      </li>\n    </>\n  );\n};\n","import React from 'react';\nimport './Comment.scss';\n\ntype Props = {\n  comment: CommentFromServer;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <>\n      <p className=\"comment__user-name\">\n        {name}\n      </p>\n      <p className=\"comment__user-email\">\n        {email}\n      </p>\n      <p className=\"comment__user-text\">\n        {body}\n      </p>\n    </>\n  );\n};\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst INIT_POSTS = 'INIT_TODOS';\nconst HANDLE_ERROR = 'HANDLE_ERROR';\nconst DELETE_POST = 'DELETE_POST';\nconst SET_QUERY = 'SET_QUERY';\nconst SET_FILTER_QUERY = 'SET_FILTER_QUERY';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const initPosts = (posts: Post[]) => ({\n  type: INIT_POSTS,\n  posts,\n});\nexport const handleError = (errorMessage: string) => ({\n  type: HANDLE_ERROR,\n  errorMessage,\n});\nexport const deletePost = (postTitle: string) => ({\n  type: DELETE_POST,\n  postTitle,\n});\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n})\nexport const setFilterQuery = (filterQuery: string) => ({\n  type: SET_FILTER_QUERY,\n  filterQuery,\n})\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getPosts = (state: RootState) => state.posts;\nexport const isLoading = (state: RootState) => state.loading;\nexport const hasError = (state: RootState) => state.errorMessage;\nexport const getQuery = (state: RootState) => state.query;\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts.filter(({ title, body }) => (`${title} ${body}`)\n    .toLocaleLowerCase()\n    .replace(/\\s*/g, ' ')\n    .includes(state.filterQuery.toLocaleLowerCase().replace(/\\s*/g, ' ')))\n}\n\n// Initial state\nexport type RootState = {\n  posts: Post[],\n  loading: boolean,\n  errorMessage: string,\n  query: string,\n  filterQuery: string,\n};\n\nconst initialState: RootState = {\n  posts: [],\n  loading: false,\n  errorMessage: '',\n  query: '',\n  filterQuery: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction): RootState => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        errorMessage: '',\n      }\n\n    case INIT_POSTS:\n      return {\n        ...state,\n        loading: false,\n        posts: action.posts,\n      }\n\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n        loading: false,\n      }\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.title !== action.postTitle)\n      }\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.query\n      }\n    case SET_FILTER_QUERY:\n      return {\n        ...state,\n        filterQuery: action.filterQuery\n      }\n\n    default:\n      return state;\n  }\n}\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React from 'react';\nimport { User } from './User';\nimport { Comment } from './Comment';\nimport './PostCard.scss';\n\nimport { useDispatch } from 'react-redux';\nimport {\n  deletePost\n} from '../store';\n\ntype Props = {\n  post: Post;\n};\n\nconst PostCard: React.FC<Props> = ({ post }) => {\n  const dispatch = useDispatch();\n  const {\n    title, body, postUser, postComment,\n  } = post;\n\n  return (\n    <>\n      <h2 className=\"post__title\">\n        {title}\n      </h2>\n      <ul className=\"post__user user\">\n        <User postUser={postUser} />\n      </ul>\n      <p className=\"post__text\">\n        {body}\n      </p>\n      <ul className=\"post__comment comment__list\">\n        {postComment.map(comment => (\n          <li className=\"comment__item\" key={comment.id}>\n            <Comment comment={comment} />\n          </li>\n        ))}\n      </ul>\n      <button\n        type=\"button\"\n        className=\"post__button post__button--delete\"\n        onClick={() => dispatch(deletePost(title))}\n      >\n        Delete post\n      </button>\n    </>\n  );\n}\n\nexport default PostCard;\n\n\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './PostList.scss';\n\nimport PostCard from './PostCard';\n\nimport {\n  getVisiblePosts,\n} from '../store';\n\nconst PostList = () => {\n  const posts = useSelector(getVisiblePosts);\n\n  return (\n    <ul className=\"post__list\">\n      {posts.map(post => (\n        <li className=\"post__item\" key={post.id}>\n          <PostCard post={post} />\n        </li>\n      ))}\n    </ul>\n  )\n};\n\nexport default PostList;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAppData } from './helpers/api';\nimport PostList from './components/PostList';\nimport debounce from 'lodash.debounce';\n\nimport './App.scss';\nimport {\n  startLoading,\n  initPosts,\n  getPosts,\n  isLoading,\n  handleError,\n  hasError,\n  getQuery,\n  setQuery,\n  setFilterQuery,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const loading = useSelector(isLoading);\n  const errorMessage = useSelector(hasError);\n  const query = useSelector(getQuery);\n\n  const handleGetPosts = () => {\n    dispatch(startLoading());\n    getAppData()\n      .then(postsFromServer => {\n        dispatch(initPosts(postsFromServer))\n      })\n      .catch(e => {\n        dispatch(handleError(e.message))\n      })\n  }\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce((value: string) => dispatch(setFilterQuery(value)), 500),\n    [],\n  );\n\n  const handleSetQuery = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    dispatch(setQuery(value));\n    setFilterQueryWithDebounce(value);\n  }\n\n  return (\n    <div className=\"post\">\n      <h1 className=\"post__header\">Redux list of posts</h1>\n      {loading\n        ? (\n          <div className=\"lds-ellipsis\">\n            <div />\n            <div />\n            <div />\n            <div />\n          </div>\n        )\n        :\n        <>\n          {posts.length === 0 &&\n            <button\n              type=\"button\"\n              className=\"post__button\"\n              onClick={handleGetPosts}\n            >\n              Load Posts\n            </button>}\n\n          {posts.length !== 0 && (\n            <>\n              <div className=\"post__search-field\">\n                <label htmlFor=\"search\">\n                  Filter Posts\n                  <input\n                    type=\"text\"\n                    id=\"search\"\n                    value={query}\n                    onChange={handleSetQuery}\n                  />\n                </label>\n              </div>\n              <PostList />\n            </>\n          )}\n          {errorMessage && (\n            <p className=\"post__error\">\n              {`Error: ${errorMessage}`}\n            </p>\n          )}\n        </>\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}